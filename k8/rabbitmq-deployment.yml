apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-svc
  namespace: iot
  labels:
    app: rabbitmq-svc
spec:
  type: LoadBalancer
  ports:
  - name: http
    protocol: TCP
    port: 15672
  - name: amqp
    protocol: TCP
    port: 5672
  - name: mqtt
    protocol: TCP
    port: 1883
  selector:
    app: rabbitmq
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
  namespace: iot
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  serviceName: rabbitmq-headless-svc
  volumeClaimTemplates:
  - metadata:
      name: rabbitmq-data
      namespace: iot
    spec:
      storageClassName: standard
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: "3Gi"
  template:
    metadata:
      name: rabbitmq
      namespace: iot
      labels:
        app: rabbitmq
    spec:
      volumes:
      - name: rabbitmq-config
        configMap:
          name: rabbitmq-config
          optional: false
          items:
          - key: enabled_plugins
            path: enabled_plugins
          - key: rabbitmq.conf
            path: rabbitmq.conf
      # read-write volume into which to copy the rabbitmq.conf and enabled_plugins files
      # this is needed since the docker image writes to the rabbitmq.conf file
      # and Kubernetes Config Maps are mounted as read-only since Kubernetes 1.9.4
      - name: rabbitmq-config-rw
        emptyDir: {}
      - name: rabbitmq-data
        persistentVolumeClaim:
          claimName: rabbitmq-data
      serviceAccountName: iot-admin
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
      containers:
      - name: rabbitmq
        image: rabbitmq:3.8-management
        volumeMounts:
          # mounting rabbitmq.conf and enabled_plugins
          # this should have writeable access, this might be a problem
        - name: rabbitmq-config
          mountPath: /etc/rabbitmq
          # mountPath: "/etc/rabbitmq/conf.d/"
          #mountPath: /var/lib/rabbitmq
        - name: rabbitmq-data
          mountPath: /var/lib/rabbitmq/mnesia
        env:
        - name: RABBITMQ_DEFAULT_PASS
          valueFrom:
            secretKeyRef:
              name: iot-admin-user
              key: password
        - name: RABBITMQ_DEFAULT_USER
          valueFrom:
            secretKeyRef:
              name: iot-admin-user
              key: username
        - name: RABBITMQ_ERLANG_COOKIE
          valueFrom:
            secretKeyRef:
              name: rabbitmq-erlang-cookie
              key: cookie
        ports:
        - name: web
          containerPort: 15672
        - name: amqp
          containerPort: 5672
        - name: mqtt
          containerPort: 1883
        - name: prometheus
          containerPort: 15692
        - name: epmd
          containerPort: 4369
        livenessProbe:
          exec:
            # This is just an example. There is no "one true health check" but rather
            # several rabbitmq-diagnostics commands that can be combined to form increasingly comprehensive
            # and intrusive health checks.
            # Learn more at https://www.rabbitmq.com/monitoring.html#health-checks.
            #
            # Stage 2 check:
            command: ["rabbitmq-diagnostics", "status"]
          initialDelaySeconds: 60
          # See https://www.rabbitmq.com/monitoring.html for monitoring frequency recommendations.
          periodSeconds: 60
          timeoutSeconds: 15
        readinessProbe: # probe to know when RMQ is ready to accept traffic
          exec:
            # This is just an example. There is no "one true health check" but rather
            # several rabbitmq-diagnostics commands that can be combined to form increasingly comprehensive
            # and intrusive health checks.
            # Learn more at https://www.rabbitmq.com/monitoring.html#health-checks.
            #
            # Stage 1 check:
            command: ["rabbitmq-diagnostics", "ping"]
          initialDelaySeconds: 20
          periodSeconds: 60
          timeoutSeconds: 10
        